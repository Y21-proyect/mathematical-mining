import os
import random
import time



               # y sin haberlo pensado,
               # me ha salido un pareado



######  bloque info y lectura usuario
######
######


intro= ('Este programa es parte de un trabajo altruista y tambien de retos que me propongo',
       'La parte altruista és que facilita la vida a otras personas.',
       'Lograr retos que te propones és bueno para la salud, mantiene tu autoestima fuerte.',
       'Por ambas partes salgo beneficiado. No se si te suena esa frasecilla "ser inteligentemente egoísta"',
       'o el refrán "ayudar a terceros és ayudarse a uno mismo"\n',
       'Es un programa tipo codigo abierto, puedes ver el codigo de programación y cambiarlo con un',
       'programa para hacer programas, tipo IDLE,. Es una forma de dar transparencia y que no está infectado\n\n',
       'Si te gusta este programa y quieres saber más cosas cuirosas puedes visitar mi canal \n    de youtube https://www.youtube.com/@yogalidof.21 ',
       'También visitar mi pagina y leer algunos libros gratis en \n    https://www.calameo.com/accounts/1582946  \n',
       'O mi página de programas gratuitos de codigo abierto en https://github.com/y21-proyect', 
       'No hace falta que des un like, no vivo de esto. Un saludo \n\n    Doc \n\n\n    Pulsa ENTER para continuar...','@',

       'This program is part of an altruistic work and challenges that I propose to myself.',
       'The altruistic part is that it makes life easier for other people.',
       'Achieving challenges is good for your health, it keeps your self-esteem strong.',
       'it is beneficial on two sides. I don`t know that little "be intelligently selfish"',
       'or the saying "helping others is helping oneself"\n',
       'It`s an open source type program, you can see the programming code and change it with a',
       'program to make programs, type IDLE. It is a way of providing transparency and that it is not infected\n\n',
       'If you like this program and want to know more curious things you can visit my channel \n    de youtube https://www.youtube.com/@yogalidof.21 ',
       'Also visit my page and read some free books on \n    https://www.calameo.com/accounts/1582946  \n',
       'Or my free open source programs page en https://github.com/y21-proyect',
       'Some important, my webs are in spanhis lenguaje',
       'You don`t need to give a like, I don`t live from this. Best regards \n\n    Doc \n\n\n    Press ENTER to continue...')




title=['       MINERIA MATEMATICA','       MATHEMATICAL MINING']
discard=['(Programa pico muestra)','(Peak sample program)']
conf=['Cambiar configuracion idioma','Change lenguaje configuration']

us=['Guia de uso','User guide']
us_guide=['Para buscar frases o textos usando el modo filón, has de añadir un ',
       'diccionario que incluya todas las palabras que existan.',
       'Para añadir el diccionario crea un archivo tipo txt y ponle el nombre',
       'dictionary y dentro pon las palabras en una columna y sin espacios',
       'libres. Ejemplo',
       '',
       'almohadilla',
       'salvapantallas',
       'arrojar',
       '',
       'El programa te pedirá el diccionario. Escribe el que has creado',
       'junto con su extension diccionario.txt',
       'El programa guarda esta configuracion en memoria, no hace falta que',
       'la vuelvas a hacer. Si quieres cambiar el diccionario repite los mismo',
       ' pasos o cambia sencillamente el contenido del archivo que creaste','',
       '@',
       'To search for phrases or texts using the seam mode, you have to add a ',
       'dictionary of language that includes all the words that exist.',
       'To add the dictionary create a txt file and name it dictionary',
       'and inside put the words in a column and without spaces', 'free. Example'
       ,'',
       'pad',
       'screensaver',
       'throw',
       '',
       'The program will ask you for the name of the file. Type in the one you',
       'created dictionary.txt,',
       'The program saves this configuration in memory, you don not need to do it again.',
       'If you want to change your vocabulary, repeat the same ones steps or simply',
       'change the content of the file you created.']

meto=['Metodica matemática usada','Mathematical method used']
metod=['Los dibujos de cualquier alfabeto son un codigo numérico en una base diferente a 10',
       'Se ve facilmente cambiando cada dibujo por un valor numérico diferente. En',
       'la lengua castellano por ejemplo sería: a=1, b=2, c=3.... z=27. Es un código',
       'numérico en base 27 que se puede pasar a base decimal. A modo de ejemplo la',
       'palabra amor se corresponde con el número 386.020. Si se hace lo mismo para',
       'frases usando el 0 como el valor del espacio, se puede cambiar perfectamente',
       'a un número la frase. Y si se añaden todos los signos y sus combinaciones, se',
       'puede pasar un libro, una enciclopedia y todo el conocimiento actual de la',
       'humanidad a un solo número tan largo como la distancia hasta estrellas o quizá',
       'más aún.','Esto lleva a deducir que los números tienen toda la información',
       'actual, la perdida y la que aún no se ha creado ni encontrado ',
       '',
       'La minería matemática compone todas las palabras y textos posibles de un alfabeto',
       'y donde aparece mucho sin sentido. Si buscas con paciencia aparece todo,',
       'todo lo que se pueda aprender, absolutamente todo',
       'Un ejemplo. El periodico que saldrá el mes próximo se podría componer hoy usando',
       'combinaciones de palabras. El problema és reconocerlo entre todos erróneos',
       '@',
       'Drawings of any alphabet are a numerical code on a base other than 10',
       'It is easily seen by changing each drawing to a different numerical value. In',
       'The Spanish language for example would be: A=1, B=2, C=3.... z=27. It is a code',
       'numerical in base 27 that can be converted to decimal base. By way of example, the',
       'word love corresponds to the number 386,020. If the same thing is done for',
       'phrases using 0 as the value of the space, it can be changed perfectly',
       'to a number the sentence. And if all the signs and their combinations are added, it is ',
       'a book, an encyclopedia and all the current knowledge of the can pass',
       'humanity to a single number as long as the distance to stars or perhaps',
       'moreover.','This leads to the inference that the numbers have all the information',
       'current, the lost and the one that has not yet been created or found',
       '',
       'Mathematical mining composes all the possible words and texts of an alphabet',
       'And where a lot of nonsense appears. If you look patiently everything appears,',
       'everything that can be learned, absolutely everything',
       'One example: newspaper of next month can be composed today using combinations',
       'of words, the trouble it is to recognice the true text inside fake texts.']

abc=['Configurar diccionario','Dictionary configuration']
made=['Vetas: explorar una región numérica buscando vetas',
      'Explore a numerical region looking for veins']
made2=['Filón: Buscar frase o texto a partir de su inicio',
      'Seam: Look for a complete sentence or text using start word or first lines']
selc=['  Seleccion: ','  Selection: ']
folder=['Nombre del fichero -> ','Folder name -> ']
head='\n\n'
marc='    '
mining=['Picando ','Itching ']
mina={'Finalizado','End'}


# INFORMACION PARA HACER PRESENTANCION

Y21=     [('\n '),
          ('              YOGALIDOF 21 PROYECT'),
          ('                - Section O21 -'),
          ('            Mathematical wisdom mining'),
          ('         Minería matemática de la sabiduría')]

seccion='O'

codice=['18O5', '12O311O3', '9O317O3', '7O321O3', '6O323O3', '5O325O3', '5O325O3', '5O325O3', '5O325O3', '6O323O34D37U1', '7O321O34D13D14U11U1', '8O319O38D17U1', '11O313O39D19U1', '18O515D54U5']

matrices=len(codice)-1
criba=0




######  funciones
######
######


def clear_console(): #FUNCION LIMPIAR CONSOLA
    if os.name == 'nt': # select system operative
        os.system('cls')     # window code for erase consol
        
    else:
        os.system('clear')   # unix/linux/mac code for erase consol

    return()



def decodificado(matriz): # FUNCION DECODIFICAR INAMGEN PRESENTACION

    global seccion

    codigo=''
    cod=''
    espacios=''
    espacio=0
    letra=''
    linea=''
    
    matriz_visual=[]

    key=0  

    for codigo in matriz:

        #print(codigo)
        
        for cod in codigo:

            if key==1:
                espacio=int(cod)

                #print('Proceso memorizar numero de letras hecho: ',espacio)
                
                while espacio!=0:
                    linea=linea+letra
                    espacio-=1
                #print('Proceso memorizar numero de letras hecho: ',letra)
                #print('Proceso 2 añadir letras finalizado: ',linea)
                    
                espacio=0
                espacios=''
                key=2

            if cod==seccion or cod=='D' or cod=='U':
                letra=cod
                espacio=int(espacios)
                while espacio!=0:
                    linea=linea+' '
                    espacio-=1
                    
                #print('Proceso memorizar letra hecho: ',letra)
                #print('Proceso 1 añadir espacios finalizado: ',linea)
                
                key=1
                
            if key==0:
                espacios=espacios+cod
                
                #print('Proceso 0 recogida espacios en curso: ',espacios,key)

            if key==2:
                key=0
                espacio=0


        linea=linea.replace('D','2').replace('U','1')
        matriz_visual.append(linea)
        linea=''
        espacio=0

        #print('Proceso 2 añadir a matriz finalizado: ',matriz_visual)

        #input()

    #for letra in matriz_visual:
    #    print(letra)

    return(matriz_visual)  


def mineria(O): # FUNCION CREAR PRESENTACION

    global matrices
    global criba

    escenario=O
    linea=''
    letras=()
    
    long_matriz=len(O)-1
    long_linea=0
    azar_linea=0
    azar_caracter=0
    
    carac_cambiantes=7
    ciclos_completos=14

    aux=carac_cambiantes
    cribado=0

    matriz_visual=[]

    while ciclos_completos!=0:
        azar_linea=random.randint(0,long_matriz) # valor al azar numero lineas
        linea=escenario[azar_linea] # linea al azar

        #print('Linea al azar elegida',linea)
        
        long_linea=len(linea)-1 # longitud linea al azar
        letras=list(linea)

        aux=long_linea

       #print('Linea antes de cambios',letras)

        while aux!=0:
            
            letras[random.randint(0,long_linea)]=' '
            
            aux-=1

        linea=''.join(letras)

        #print('Linea después de cambios',linea)

        matriz_visual.append(linea)

        ciclos_completos-=1

    print('\n\n\n')
    
    for letra in matriz_visual[0:matrices]:  #imprime visualmente parte matriz alterada
        print('                               ',letra)
    for letra in O[matrices:]:               #imprime visualmente parte matriz no alterada
        print('                               ',letra)

    #print(cribado,matrices)

    criba+=1 # relentiza efecto visula de búsqueda en la presentacion
    
    if criba==4:
       matrices-=1
       criba=0

    #print(criba,matrices)

    #input()


def configuration(flag): # FUNCION CONFIGURACION IDIOMA
    conf=''
    conf2=''
    temp=''
    conf_txt=[]

    directorio=os.getcwd() # obtiene la dirección donde se ejecuta el programa

    for raiz,dirs,archivos in os.walk(directorio): # busca dentro de la carpeta
          print (raiz,'1')
          print (dirs,'2')
          print (archivos,'3')
          for archivo in archivos:
                if archivo=='config.txt':
                      print('ok---',archivo)
                      temp='n'

    if temp=='': # si no existe el fichero txt crea uno nuevo y le incluye c
          with open('config.txt','w') as config:
                config.write('c')

    
    with open('config.txt', 'r', encoding='utf-8') as config:
        lineas = config.readlines()

        for conf in lineas:
            conf_txt=list(conf)

    #print(conf_txt)
    #input()

    if flag=='2':  # carga diccionario palabras
        temp=conf[1:]
        return(temp)

    if flag=='0': # carga configuracion idioma consola
            if conf_txt[0]=='c':
                return('0')
            else:
                return('1')
    else:     

        while flag=='1':
            
            clear_console()

            print('\n\n')
            print('     CONFIGURACION DE IDIOMA - LENGUAJE CONFIGURATION\n')
            print('     c - Castellano')
            print('     e - English')
            print('-----------------------')
            conf=input('     Elige idioma/ Select lenguaje: ')

            if conf== 'c' or conf=='e':
                conf_txt[0]=conf

                #print(conf_txt)

                for conf in conf_txt:
                    conf2=conf2+conf

                #print(conf2)
                #input()
                    
                with open('config.txt', 'w', encoding='utf-8') as config:
                        config.write(conf2)
                
                return()


def num_abc(di,conf): # CONVERSOR NUMERO A PALABRA


    abc=[(' ','a','b','c','d','e','f','g','h','i','j','k','l','ll',
          'm','n','ñ','o','p','q','r','s','t','u','v','w','x','y','z'),
         (' ','a','b','c','d','e','f','g','h','i','j','k','l','ll','m','n',
          'o','p','q','r','s','t','u','v','w','x','y','z')]

    div=int(di)
    coc=0
    rest=0
    number=0

    aux=''
    aux2=''
    key=False

    conf_txt=()


    if conf=='0': # selector de abecediario castellano o ingles
        
        conf_txt=list(abc[0])

    else:

        conf_txt=list(abc[1])

    base_abc=len(conf_txt)


    aux=''
    aux2=''
    
    while True:
      
            div=div-base_abc  # resta base a div
            coc=coc+1 # suma veces restada base (cociente)
            
            #print('resta hecha:',div,coc)
            
            if div<base_abc and coc>base_abc: #si divideno menor a base y cociente mayor
                for aux in conf_txt: #itera en base abecedario buscando resto                           
                    if number==div: #localiza posicion listado letra correspondiente a resto
                        aux2=aux+aux2
                        
                        #print('resto añadido',div,aux,'-->',aux2)
                                       
                    number+=1
                number=0
                div=coc
                coc=0

            if div<base_abc and coc<base_abc: # si dividendo y coc inferiores a base

                if div<0:
                    div+=base_abc
                    coc-=1


                #print('coc menor que base',div,base_abc)

                for aux in conf_txt: #itera en base abecedario buscando resto                       
                    if number==div: #localiza posicion listado letra correspondiente a resto                            aux2=aux+aux2
                         aux2=aux+aux2

                         #print('resto añadido: ','(',aux2,')','--->',number,div,aux,coc)
                            
                    number+=1

                number=0
                                      
                for aux in conf_txt: #itera en base abecedario buscando cociente
                    if number==coc: #localiza posicion listado letra correspondiente a coc
                         #print(number,coc,aux)
                         aux2=aux+aux2

                         #print('cociente final :','(',aux,')','--->',number,aux, aux2)

                         return(aux2)

                    number+=1


def filon(config):
      
      abc=[(' ','a','b','c','d','e','f','g','h','i','j','k','l','ll',
           'm','n','ñ','o','p','q','r','s','t','u','v','w','x','y','z'),
           (' ','a','b','c','d','e','f','g','h','i','j','k','l','ll','m','n',
           'o','p','q','r','s','t','u','v','w','x','y','z')]

      mining=['Picando ','Itching ']
      

      head='\n\n'
      marc='    '

      long_abc=len(abc[0])
      long_dic=0
      mn=0
      mx=0
      cursor=0
      conf=config
      


      start_words='' # aux
      palabra='' #aux
      start_text=[] #matriz palabras cabecera
      text=[] # matriz texto en numeros sin cabecera
      text2=[] # matriz texto en palabras sin cabecera
      text_alita=[] # suma text + text2
      text_alita2=[] # matriz letras txt_alita + espacios entre palabras
      text_ido=[] # matriz text_alita2 en valores numéricos de abecedario
      love=0 # valor final frase pasada a numero

      
      proveta=0 
      proveta1=0

      precipitado=''

      key=False

      if conf==0:    # recoge datos sobre inicio y longitud texto
            print(head)
            start_words=input('    Escribe palabra o palabras de inicio de texto -->  ')
            mx=int(input('    ¿cuantas palabras tiene la frase o texto? -->'))

      else:
            print(head)
            start_words=input('    Write start word o words --> ')
            mx=int(input('    How many words are there inside text? -->'))


     # creacion cabezal 
      if ' ' in start_words: # si hay espacios entre palabras trocea desde espacios
            start_text=start_words.split(' ')
      else:
            start_text.append(start_words) # si no hay espacios se entiende que és solo una palabra

      mn=len(start_text) # si son varias palabras cuenta cuantas hay

      mx=mx-mn
      proveta=mx # recoge valor para crear matriz numerica

      #print('\nNumero de casillas en matriz numerica: ',mx)        

      while proveta!=0: #creacion matriz texto en numeros sin cabezal
            text.append(0)
            proveta-=1

      #print('Matriz numerica creada: ',text)

      mx=len(text) # obtencion medida matriz texto en numeros sin cabezal
      mx-=1

      text[0]+=1

      #print('Casillas creadas para matriz numerica: ',text2,text)
      #input()

            
      with open('dictionary.txt', 'r', encoding='utf-8') as dictionary:
            diccionario = dictionary.readlines()

            for palabra in diccionario: # cuenta numero de palabras diccionario y asocia 1 valor a
                  long_dic+=1           # numerico a cada una para procesar orden de uso
                                        # las palabras se ordenan de 1 en adelante


      #print('Numero de palabras en diccionario',long_dic)

      print(head) # imprimir marco superior pantalla

     
      while True: # incrementa casilla 1 y crea efecto contador de agua
                  # de izquierda a derecha en texto sin cabezal
                  # la casilla 0 nunca llega al valor de diccionaro porque
                  # se borra y pone a 1 antes de pasar por while otra vez
                  # cuenta de izquierda a derecha al ser un número

            #print(text)
            #input()
            
            cursor=0
            text[0]+=1 # Suma 1 a la primera casilla

            for proveta in text: # itera en cada casilla texto numeros sin cabecera
                                 # creando efecto reloj de izquierda a derecha

                  #print('\nEntada matriz a contaje ciclo ',cursor,': ', text)
           
                  if proveta==long_dic: # si la casilla alcanza valor maximo de diccionario

                        text[cursor]=0 # pon casilla a 0
                        text[cursor+1]+=1 # incrementa en 1 casilla siguiente

                  if text[mx]>long_dic-1: # conserva el valor máximo de casilla más
                                              # a la derecha

                        text[mx]=long_dic-1

                  #print('Salida matriz contaje ', cursor,': ',text,'\n')

                  cursor+=1

                 
            cursor=0

            ###### obtencion frase
            for proveta in text: # itera en valores numericos de texto numeros sin cabecera
                  for palabra in diccionario: # itera en palabras del diccionario

                       #print('filtrando valores: ', proveta,cursor,palabra)

                       if cursor==proveta: #si coincide el numero obtenido con el de

                             palabra=palabra.replace('\n','')
                             
                             precipitado=precipitado+palabra+' '+'¬' # ordena de forma inversa
                             cursor=0                                # palabras, derecha a iquierda.
                             break

                       cursor+=1

            #print('codificado valor numerico a letra: ',precipitado)

            text2=precipitado.split('¬')
            precipitado=''

            #print('Decodificado valor numerico a palabra: ',text,text2)
            #input()

            text_alita=start_text+text2 # frase completa en matriz de palabras y sin espacios

            #print('frase en matriz:',text_alita)
                      
            ###### conversor del numero a la palabra correspondiente del diccionario
            ######

            for proveta in text_alita: # descomponer palabras en letras

                  if proveta!='': # descarta espacios libres matriz
                        text_alita2.append(proveta)
                        text_alita2.append(' ') # añade espacio entre palabras

            cursor=0

            #print('frase con espacios añadidos: ', text_alita2)

                 
            for proveta in text_alita2: # coje palabra a palabra

                  #print('Entrada palabra a descomponer en números: ',proveta)
               
                  for precipitado in proveta: # coje letra a letra de palabra

                        #print('Descomponiendo palabra: ',precipitado)
                       
                        for proveta1 in abc[conf]: # da valor abc numerico a letra
                              
                              if proveta1==precipitado:

                                    #print('la letra',precipitado,'tiene el valor --',cursor)
                                    
                                    text_ido.append(cursor)
                                    cursor=0
                                    break
                              cursor+=1

            #print('Descomposicon letras en numeros ',text_ido)
           
            #input()     

            mn=len(text_ido)
            mn=mn-1
            
            for proveta in text_ido:

                 if cursor==mn:
                        break
                  
                 #print(love,proveta,long_abc)
                 
                 love=love+proveta
                 
                 #print(love,proveta,long_abc)
                 
                 love=love*long_abc
                 
                 #print(love,proveta,long_abc)

                 cursor+=1

            # corrige error que arrastra programa con 1 cero más

            #love=love/long_abc

            start_words=''

            for palabra in text_alita:
                  start_words=start_words+palabra+' '
                  
            #print('Valor pasado a numeros: ',text_ido)
            print(marc,mining[conf],'|---> ',love,' |---D ',start_words)
            #print(marc, love)
     
            start_words=''
            love=0
            text_alita2=[]
            text_ido=[]
                        
            #input()

            for proveta in text: # cuando todos los valores de todas las casillas
                                 # son iguales para el programa

                      if proveta!=long_dic-1:
                           key=False
                           break
                      else:
                           key=True

            if key==True:
                  break

            #input() 

      input('      --- END ---')

      




####### PROGRAMA PRINCIPAL
#######
#######


action=0
config=0
diccio=''
aux=''
aux2=''
aux3=''

mx=0
mn=0

ciclo=0
key=False
O=[]


config=int(configuration('0'))

#### animacion inicio y presentacion
####


O=decodificado(codice)


while action!=50:
    mineria(O)
    time.sleep(0.05)
    clear_console()
    action+=1

#print(ciclo)

#time.sleep(0.05)

print('\n\n\n')       
for aux in O:
    print('                               ',aux)

time.sleep(0.05)

for aux in Y21:
    print('                               ',aux)
    time.sleep(0.05)

input()

clear_console()
print(head)

for aux in intro:
      if config==0:
            print(marc,aux)
            if aux=='@':
                  break

      if config==1:
            if key==True:
                  print(marc,aux)
            if aux=='@':
                  key=True

      

#print(config, diccio)

input() # salir de informacion intro


while True:     #### cuerpo programa
                ####
    
    clear_console()
    aux=0
    key=False
    
    print(head)
    print(marc,title[config]) ## titutlo
    print(marc,discard[config],'\n') ## subtitulo
    print(marc,'1- '+conf[config])
    print(marc,'2- '+us[config])
    print(marc,'3- '+meto[config],'\n')
    print(marc,'4- '+abc[config])
    print(marc,'5- '+made[config])
    print(marc,'7- '+made2[config])
    print(marc,'----------------------------------------------------')

    action=input(marc+str(selc[0]))
    #print(action)
    #input()


    print(head)

    if action=='1':  ### configuracion de idioma

          clear_console()
          
          configuration('1')
          config=int(configuration('0'))
          print(config)
          input()


    elif action=='2': ###  guia de uso

        clear_console()
        
        for aux in us_guide:  
            if config==0:
                print(marc,aux)
                if aux=='@':
                    break
            if config==1:
                if key==True:
                    print(marc,aux)
                if aux=='@':
                    key=True             
        input()
           

    elif action=='3': ### metodologia usada
        for aux in metod:
            if config==0:
                print(marc,aux)
                if aux=='@':
                    break
            if config==1:
                if key==True:
                    print(marc,aux)
                if aux=='@':
                    key=True

        input()


    elif action=='4':  ## configurar diccionario
        while True:
            
            clear_console()
            print(marc,head)
            
            aux=input(marc+folder[config])            
            aux2=input(aux+ '--> ok? (y/n)   ')
            
            if aux2=='Y' or 'y':
                with open('config.txt', 'r', encoding='utf-8') as voc:
                    lineas = voc.readlines()
                    for aux2 in lineas:
                        aux2=aux2.replace('\n','')
                        break
                    
                    conf_txt=list(aux2)
                    aux=conf_txt[0]+aux
                    

                with open('config.txt', 'w', encoding='utf-8') as voc:
                    voc.write(aux)

                break
            
            
    elif action=='5': ## busqueda en vetas

        clear_console()
        print(head)
        
        mx=int(input(marc+'max?  '))
        mn=int(input(marc+'min?  '))


        while True:
            
            #print('llamando funcion')

            aux=str(mn)
            aux2=str(config)

            aux2=num_abc(mn,aux2)

            print(marc,mining[config],'Max:',mx,'Min:',mn,'-->',aux2)

            mn+=1

            if mn>mx:
                break
            
        print('\n',marc,' -- END --')
        input()
        
            #print(aux2,coc)
            #input()
                        

    elif action=='7': ## busqueda en filones
          clear_console()
          filon(config)
